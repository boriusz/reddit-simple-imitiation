# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Comment {
    createdAt: String!
    id: Int!
    post: Post!
    postId: Float!
    text: String!
    updatedAt: String!
    user: User!
    userId: Float!
}

type FieldError {
    field: String!
    message: String!
}

type Mutation {
    changePassword(newPassword: String!, token: String!): UserResponse!
    createComment(postId: Int!, text: String!): Comment!
    createPost(input: CreatePostInput!): Post!
    deleteComment(commentId: Int!): Comment
    deletePost(id: Int!): Boolean!
    editComment(commentId: Int!, text: String!): Comment!
    forgotPassword(email: String!): Boolean!
    login(password: String!, usernameOrEmail: String!): UserResponse!
    logout: Boolean!
    register(options: UsernamePasswordInput!): UserResponse!
    updatePost(id: Int!, text: String!, title: String!): Post
    vote(postId: Int!, value: Int!): Boolean!
}

type PaginatedPosts {
    hasMore: Boolean!
    posts: [Post!]!
}

type Post {
    comments: [Comment!]!
    createdAt: String!
    creator: User!
    creatorId: Float!
    id: Float!
    points: Float!
    text: String!
    textSnippet: String!
    title: String!
    updatedAt: String!
    upvotes: [Upvote!]
    voteStatus: Int
}

type Query {
    me: User
    post(id: Int!): Post
    postComments(postId: Int!): [Comment!]!
    posts(cursor: String, limit: Int!): PaginatedPosts!
    userComments(userId: Int!): [Comment!]!
}

type Upvote {
    post: Post!
    postId: Float!
    user: User!
    userId: Float!
}

type User {
    createdAt: String!
    email: String!
    id: Float!
    updatedAt: String!
    username: String!
}

type UserResponse {
    errors: [FieldError!]
    user: User
}

input CreatePostInput {
    text: String!
    title: String!
}

input UsernamePasswordInput {
    email: String!
    password: String!
    username: String!
}
